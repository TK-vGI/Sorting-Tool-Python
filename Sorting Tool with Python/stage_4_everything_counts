import argparse
from typing import List


def sorting_data(lst: List, datatype: str, sortype: str) -> None:
    if not lst:
        print("No data provided.")
        return

    size = len(lst)
    match sortype:
        case "byCount":
            # Count occurrences using a dictionary
            count_dict = {}
            for item in lst:
                count_dict[item] = count_dict.get(item, 0) + 1
            # Create (count, dataEntry) pairs
            count_pairs = [(count,item) for item, count in count_dict.items()]
            # Sort by count (ascending) and then naturally within equal counts
            if datatype == "long":
                sorted_lst_count = sorted(count_pairs, key=lambda x: (x[0],x[1]))
            else:
                sorted_lst_count = sorted(count_pairs, key=lambda x: (x[0],x[1].lower(),x[1]))

            print(f"Total {datatype}s: {size}")
            for count, item in sorted_lst_count:
                print(f"{item}: {count} time{'s' if count != 1 else ''}, {count * 100 // size}%")

        case "natural":
            # Natural sorting
            if datatype == "long":
                sorted_lst_natural = sorted(lst) # Numeric order for numbers/int
            else:
                sorted_lst_natural = sorted(lst, key=lambda x:(x.lower(),x)) # Lexicographic order for strings

            print(f"Total {datatype}s: {size}")
            if datatype in ("long","word"):
                print("Sorted data:", *sorted_lst_natural)
            else:
                print("Sorted data:", *sorted_lst_natural, sep="\n")


def get_input(datatype: str) -> List[str | int]:
    inp_data = []
    while True:
        try:
            line = input()
            if datatype == "long":
                inp_data.extend([int(x) for x in line.split()])
            elif datatype == "line":
                inp_data.append(line)  # Treat each line as a whole string
            elif datatype == "word":
                inp_data.extend(line.split())  # Split into words
        except ValueError:
            if datatype == "long":
                print("Error: Non-integer input detected for long datatype. Skipping invalid input.")
                continue
        except EOFError:
            break
    return inp_data


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="This program sorts input data based on type and sorting method.")
    parser.add_argument(
        "-dataType", "--dataType",
        choices=["long", "line", "word"],
        default="word",
        help="Datatype decides how the data is processed.")
    parser.add_argument(
        "-sortingType", "--sortingType",
        choices=["natural", "byCount"],
        default="natural",
        help="Sorting type: 'natural' for lexicographic (strings) or numeric (integers),\
         'count' for sorting by frequency.")
    args = parser.parse_args()

    sort_type = args.sortingType
    data_type = args.dataType
    # print(f"The arguments you provided are: dataType={data_type}, sortingType={sorting_type}")
    data = get_input(data_type)
    sorting_data(data, data_type, sort_type)
