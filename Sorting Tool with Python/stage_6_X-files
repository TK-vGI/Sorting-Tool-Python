import argparse
from typing import List
import sys


def write_to_file(filename: str, content: List[str]) -> None:
    """Write content lines to the specified file."""
    try:
        with open(filename, "w", encoding="utf-8") as f:
            for line in content:
                f.write(line + "\n")
    except PermissionError:
        print(f"Cannot write to output file {filename}: Permission denied")
        sys.exit(1)
    except IOError as error:
        print(f"Cannot write to output file {filename}: {error}")
        sys.exit(1)


def sorting_data(lst: List, datatype: str, sortype: str, outputfile: str | None) -> None:
    """Sort and output data based on datatype and sorting type."""
    if not lst:
        print("No data provided.")
        return

    size = len(lst)
    output_lines = []
    match sortype:
        case "byCount":
            # Count occurrences using a dictionary
            count_dict = {}
            for item in lst:
                count_dict[item] = count_dict.get(item, 0) + 1
            # Create (count, dataEntry) pairs
            count_pairs = [(count, item) for item, count in count_dict.items()]
            # Sort by count (ascending) and then naturally within equal counts
            if datatype == "long":
                sorted_lst_count = sorted(count_pairs, key=lambda x: (x[0], x[1]))
            else:
                sorted_lst_count = sorted(count_pairs, key=lambda x: (x[0], x[1].lower(), x[1]))

            output_lines.append(f"Total {datatype}s: {size}")  # instead of print(f"Total {datatype}s: {size}")
            for count, item in sorted_lst_count:
                output_lines.append(
                    f"{item}: {count} time{'s' if count != 1 else ''}, {count * 100 // size}%")  # instead of print(f"...")

        case "natural":
            # Natural sorting
            if datatype == "long":
                sorted_lst_natural = sorted(lst)  # Numeric order for numbers/int
            else:
                sorted_lst_natural = sorted(lst, key=lambda x: (x.lower(), x))  # Lexicographic order for strings

            output_lines.append(f"Total {datatype}s: {size}")  # instead of print(f"Total {datatype}s: {size}")
            if datatype in ("long", "word"):
                output_lines.append("Sorted data: " + " ".join(map(str, sorted_lst_natural))) # instead of print(f"...")
            else:
                output_lines.append("Sorted data:") # instead of print(f"...")
                for item in sorted_lst_natural:
                    output_lines.append(str(item)) # instead of print(f"...")

    if outputfile:
        write_to_file(output_file, output_lines)
    else:
        for line in output_lines:
            print(line)


def process_input_line(line: str, datatype: str, inp_data: List[str | int]) -> None:
    """Process a single input line based on datatype."""
    line = line.strip()
    if datatype == "long":
        for x in line.split():
            try:
                inp_data.append(int(x))
            except ValueError:
                print(f'"{x}" is not a long. It will be skipped.')
    elif datatype == "line":
        if line:  # Skip empty lines
            inp_data.append(line)
    elif datatype == "word":
        inp_data.extend(line.split())


def get_input(datatype: str, filename: str | None) -> List[str | int]:
    """Parse input data from file or standard input."""
    inp_data = []
    if filename:
        try:
            with open(filename, "r", encoding="utf-8") as f:
                for line in f:
                    process_input_line(line, datatype, inp_data)
        except FileNotFoundError:
            print(f"Cannot read input file {filename}: File not found")
            sys.exit(1)
        except PermissionError:
            print(f"Cannot read input file {filename}: Permission denied")
            sys.exit(1)
        except IOError as error:
            print(f"Cannot read input file {filename}: {error}")
            sys.exit(1)
    else:
        while True:
            try:
                line = input()
                process_input_line(line, datatype, inp_data)
            except EOFError:
                break
            except KeyboardInterrupt:
                break
    return inp_data


if __name__ == "__main__":
    parser = argparse.ArgumentParser(prog="Sorting tool with python",
                                     description="This program sorts input data based on type and sorting method")
    parser.add_argument(
        "-dataType", "--dataType",
        nargs="?",
        const=None,
        choices=["long", "line", "word"],
        default="word",
        help="Datatype decides how the data is processed.")
    parser.add_argument(
        "-sortingType", "--sortingType",
        nargs="?",  # Allow optional value
        const=None,  # Better for handling Raise error situation with missing argument
        choices=["natural", "byCount"],
        default="natural",
        help="Sorting type: 'natural' for lexicographic (strings) or numeric (integers),\
         'count' for sorting by frequency.")
    parser.add_argument(
        "-inputFile", "--inputFile",
        type=str,
        default=None,
        help="File to read input data from (optional; defaults to standard input.")
    parser.add_argument(
        "-outputFile", "--outputFile",
        type=str,
        default=None,
        help="File to write output data to (optional; defaults to standard output.")

    # Parse known arguments and capture unknown ones
    args, unknown_args = parser.parse_known_args()

    # Handle unknown arguments
    for arg in unknown_args:
        print(f'"{arg}" is not a valid parameter. It will be skipped.')

    # Check for missing dataType or sortingType using raise (Assert statement topic)
    try:
        if args.dataType is None:
            raise ValueError("No data type defined!")
        if args.sortingType is None:
            raise ValueError("No sorting type defined!")
    except ValueError as e:
        print(e)
        sys.exit(1)

    sort_type = args.sortingType
    data_type = args.dataType
    input_file = args.inputFile
    output_file = args.outputFile
    # print(f"The arguments you provided are: dataType={data_type}, sortingType={sort_type}, inputFile({bool(input_file)})={input_file}")
    data = get_input(data_type, input_file)
    sorting_data(data, data_type, sort_type, output_file)
